{"version":3,"sources":["components/Cell/Cell.jsx","components/Board/Board.jsx","components/ResultOverlay/ResultOverlay.jsx","utils/WinnerCalc.js","components/Footer/FooterComp.jsx","components/Game/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellClass","classNames","cell","winner","highlight","cellContentClass","populated","value","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","cellClicked","id","ResultOverlay","resultOverlayClass","isGameOver","message","onNewGameClicked","winningMatrix","0","1","2","3","4","5","6","7","8","FooterComp","Game","useState","setCellValues","xIsNext","setXIsNext","setIsGameOver","turnsLeft","setTurnsLeft","setWinner","setWinningCombination","cellIndex","isCellEmpty","newCellValues","updatedTurnLeft","calcResult","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa744803.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './Cell.css'\r\n\r\nconst Cell = (props) => {\r\n\r\n    const cellClass = classNames({\r\n        cell: true,\r\n        winner: props.highlight\r\n    })\r\n\r\n    const cellContentClass = classNames({\r\n        'cell-content': true,\r\n        populated: props.value\r\n    })\r\n\r\n    return (\r\n        <button className={cellClass} onClick={props.onClick}>\r\n            <span className={cellContentClass}>{props.value}</span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\n\r\nimport './Board.css'\r\nimport Cell from '../Cell/Cell';\r\n\r\n\r\nconst Board = (props) => {\r\n\r\n    const cells = props.cellValues.map((value, index) => {\r\n        const highlight = props.winningCombination && props.winningCombination.indexOf(index) >= 0;\r\n\r\n        return <Cell\r\n            key={index}\r\n            value={value}\r\n            highlight={highlight}\r\n            onClick={() => props.cellClicked(index)}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div id=\"board\">\r\n            {cells}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './ResultOverlay.css'\r\n\r\nconst ResultOverlay = (props) => {\r\n\r\n    const resultOverlayClass = classNames({\r\n        'modal-open': props.isGameOver\r\n    })\r\n\r\n    const message = props.winner ? `Winner is ${props.winner}` : 'It is a tie'\r\n\r\n    return (\r\n        <div id=\"modal-overlay\" className={resultOverlayClass}>\r\n            <div id=\"game-result-modal\">\r\n                <div id=\"result-container\">\r\n                    <div id=\"winner-container\">\r\n                        <span>{message}</span>\r\n                    </div>\r\n                </div>\r\n                <div id=\"new-game-container\">\r\n                    <button id=\"new-game-button\" onClick={props.onNewGameClicked}>Start New Game</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultOverlay;","const winningMatrix = {\r\n    0: [[1, 2], [3, 6], [4, 8]],\r\n    1: [[0, 2], [4, 7]],\r\n    2: [[0, 1], [5, 8], [4, 6]],\r\n    3: [[0, 6], [4, 5]],\r\n    4: [[2, 6], [3, 5], [1, 7], [0, 8]],\r\n    5: [[3, 4], [2, 8]],\r\n    6: [[7, 8], [0, 3], [2, 4]],\r\n    7: [[6, 8], [1, 4]],\r\n    8: [[6, 7], [2, 5], [0, 4]]\r\n};\r\n\r\nexport const calculateWinner = (cellValues, turnsLeft, cellIndex) => {\r\n\r\n    const winningRanges = winningMatrix[cellIndex];\r\n\r\n    for (let i = 0; i < winningRanges.length; i++) {\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winningRanges[i][0]];\r\n        const secondOption = cellValues[winningRanges[i][1]];\r\n\r\n        if (currentValue === firstOption && firstOption === secondOption) {\r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\r\n            };\r\n        };\r\n    };\r\n\r\n    if (turnsLeft === 0) {\r\n        return {\r\n            hasResult: true,\r\n            winner: undefined,\r\n            winningCombination: []\r\n        }\r\n    };\r\n\r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination: []\r\n    };\r\n}","import React from 'react';\r\n\r\nimport './FooterComp.css'\r\n\r\nconst FooterComp = () => {\r\n    return ( \r\n        <div className=\"footer\">\r\n            <p>\r\n                &copy; Juan Cruz Moyano \r\n            </p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default FooterComp","import React, { useState } from 'react';\r\n\r\nimport './Game.css'\r\nimport Board from '../Board/Board';\r\nimport ResultOverlay from '../ResultOverlay/ResultOverlay';\r\nimport { calculateWinner } from '../../utils/WinnerCalc';\r\nimport FooterComp from '../Footer/FooterComp';\r\n\r\n\r\nconst Game = () => {\r\n\r\n  const [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [turnsLeft, setTurnsLeft] = useState(9);\r\n  const [winner, setWinner] = useState();\r\n  const [winningCombination, setWinningCombination] = useState([]);\r\n\r\n  const isCellEmpty = (cellIndex) => cellValues[cellIndex] === '';\r\n\r\n  const restartGame = () => {\r\n    setCellValues(['', '', '', '', '', '', '', '', ''])\r\n    setXIsNext(true)\r\n    setIsGameOver(false)\r\n    setTurnsLeft(9);\r\n    setWinner(undefined)\r\n    setWinningCombination([])\r\n  }\r\n\r\n  const onCellClicked = (cellIndex) => {\r\n    if (isCellEmpty(cellIndex)) {\r\n      const newCellValues = [...cellValues]\r\n      newCellValues[cellIndex] = xIsNext ? 'X' : 'O'\r\n\r\n      const updatedTurnLeft = turnsLeft - 1;\r\n\r\n      //Calculate the result\r\n      const calcResult = calculateWinner(newCellValues, updatedTurnLeft, cellIndex)\r\n\r\n      setCellValues(newCellValues)\r\n      setXIsNext(!xIsNext)\r\n      setIsGameOver(calcResult.hasResult)\r\n      setTurnsLeft(updatedTurnLeft);\r\n      setWinner(calcResult.winner)\r\n      setWinningCombination(calcResult.winningCombination)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div id=\"game\">\r\n        <h1>Tic Tac Toe</h1>\r\n        <Board\r\n          cellValues={cellValues}\r\n          winningCombination={winningCombination}\r\n          cellClicked={onCellClicked}\r\n        />\r\n      </div>\r\n      <ResultOverlay\r\n        isGameOver={isGameOver}\r\n        winner={winner}\r\n        onNewGameClicked={restartGame}\r\n      />\r\n      <FooterComp />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;","import Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}